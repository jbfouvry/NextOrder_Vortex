# Temporary containers for the integrations
const TAB_X_1 = zeros(Float64,NPART)
const TAB_Y_1 = zeros(Float64,NPART)
#####
const TAB_XDOT_1 = zeros(Float64,NPART)
const TAB_YDOT_1 = zeros(Float64,NPART)
const TAB_XDOT_2  = zeros(Float64,NPART)
const TAB_YDOT_2  = zeros(Float64,NPART)
const TAB_XDOT_3  = zeros(Float64,NPART)
const TAB_YDOT_3  = zeros(Float64,NPART)
const TAB_XDOT_4  = zeros(Float64,NPART)
const TAB_YDOT_4  = zeros(Float64,NPART)
const TAB_XDOT_5  = zeros(Float64,NPART)
const TAB_YDOT_5  = zeros(Float64,NPART)
const TAB_XDOT_6  = zeros(Float64,NPART)
const TAB_YDOT_6  = zeros(Float64,NPART)
const TAB_XDOT_7  = zeros(Float64,NPART)
const TAB_YDOT_7  = zeros(Float64,NPART)
const TAB_XDOT_8  = zeros(Float64,NPART)
const TAB_YDOT_8  = zeros(Float64,NPART)
const TAB_XDOT_9  = zeros(Float64,NPART)
const TAB_YDOT_9  = zeros(Float64,NPART)
const TAB_XDOT_10 = zeros(Float64,NPART)
const TAB_YDOT_10 = zeros(Float64,NPART)
const TAB_XDOT_11 = zeros(Float64,NPART)
const TAB_YDOT_11 = zeros(Float64,NPART)
const TAB_XDOT_12 = zeros(Float64,NPART)
const TAB_YDOT_12 = zeros(Float64,NPART)
const TAB_XDOT_13 = zeros(Float64,NPART)
const TAB_YDOT_13 = zeros(Float64,NPART)
const TAB_XDOT_14 = zeros(Float64,NPART)
const TAB_YDOT_14 = zeros(Float64,NPART)
const TAB_XDOT_15 = zeros(Float64,NPART)
const TAB_YDOT_15 = zeros(Float64,NPART)
###############################################
# Pre-computed coefficients for the RK9 integrator
# This corresponds to the integrator Vern9 in DifferentialEquations.jl
# This is a copy-paste from
# https://github.com/SciML/OrdinaryDiffEq.jl/blob/master/lib/OrdinaryDiffEqVerner/src/verner_tableaus.jl
###############################################

const a0201_RK9 = convert(Float64, 1731 // 50000)

const a0301_RK9 = convert(Float64,
    -BigInt(177968356965557) // BigInt(1002427673820000) +
    BigInt(14180534491313) // BigInt(250606918455000) * 6^(1 // 2))
const a0302_RK9 = convert(Float64,
    BigInt(64021741529527) // BigInt(200485534764000) -
    BigInt(7504450763411) // BigInt(100242767382000) * 6^(1 // 2))

const a0401_RK9 = convert(Float64,
    BigInt(22890147) // BigInt(430480000) -
    BigInt(2950617) // BigInt(430480000) * 6^(1 // 2))
const a0403_RK9 = convert(Float64,
    BigInt(68670441) // BigInt(430480000) -
    BigInt(8851851) // BigInt(430480000) * 6^(1 // 2))

const a0501_RK9 = convert(Float64,
    BigInt(592203994261020339) // BigInt(513126355505556250) +
    BigInt(730386990293623641) // BigInt(2052505422022225000) * 6^(1 // 2))
const a0503_RK9 = convert(Float64,
    -BigInt(8712153884182794903) // BigInt(2052505422022225000) -
    BigInt(2843421359195851533) // BigInt(2052505422022225000) * 6^(1 // 2))
const a0504_RK9 = convert(Float64,
    BigInt(1873698362223295443) // BigInt(513126355505556250) +
    BigInt(528258592225556973) // BigInt(513126355505556250) * 6^(1 // 2))

const a0601_RK9 = convert(Float64,
    BigInt(11380823631) // BigInt(157617812000) -
    BigInt(339148869) // BigInt(39404453000) * 6^(1 // 2))
const a0604_RK9 = convert(Float64,
    BigInt(16193232887091831) // BigInt(58864341808507450) -
    BigInt(2355345717024309) // BigInt(58864341808507450) * 6^(1 // 2))
const a0605_RK9 = convert(Float64,
    BigInt(165912282616977) // BigInt(4179075230308000) -
    BigInt(33181894472511) // BigInt(2089537615154000) * 6^(1 // 2))

const a0701_RK9 = convert(Float64,
    BigInt(26523528363) // BigInt(231790900000) +
    BigInt(863255358) // BigInt(123138915625) * 6^(1 // 2))
const a0704_RK9 = convert(Float64,
    -BigInt(38208748178016484817787) // BigInt(842517966262441068418750) -
    BigInt(86118788556282369822807) // BigInt(842517966262441068418750) *
    6^(1 // 2))
const a0705_RK9 = convert(Float64,
    BigInt(92362336407446913) // BigInt(290322814529044000) -
    BigInt(232039320950012997) // BigInt(2467743923496874000) * 6^(1 // 2))
const a0706_RK9 = convert(Float64,
    -BigInt(362925891) // BigInt(1690350537500) +
    BigInt(857800423623) // BigInt(3380701075000) * 6^(1 // 2))

const a0801_RK9 = convert(Float64, 43 // 600)
const a0806_RK9 = convert(Float64, BigInt(43) // BigInt(150) + BigInt(43) // BigInt(2400) * 6^(1 // 2))
const a0807_RK9 = convert(Float64, BigInt(43) // BigInt(150) - BigInt(43) // BigInt(2400) * 6^(1 // 2))

const a0901_RK9 = convert(Float64, 7353 // 102400)
const a0906_RK9 = convert(Float64,
    BigInt(22833) // BigInt(102400) +
    BigInt(8901) // BigInt(204800) * 6^(1 // 2))
const a0907_RK9 = convert(Float64,
    BigInt(22833) // BigInt(102400) -
    BigInt(8901) // BigInt(204800) * 6^(1 // 2))
const a0908_RK9 = convert(Float64, -3483 // 102400)

const a1001_RK9 = convert(Float64, 376708742472214988700853 // 7788456028125000000000000)
const a1006_RK9 = convert(Float64,
    BigInt(187914666753956840195279) // BigInt(2596152009375000000000000) -
    BigInt(210440846556290693268911) // BigInt(15576912056250000000000000) *
    6^(1 // 2))
const a1007_RK9 = convert(Float64,
    BigInt(187914666753956840195279) // BigInt(2596152009375000000000000) +
    BigInt(210440846556290693268911) // BigInt(15576912056250000000000000) *
    6^(1 // 2))
const a1008_RK9 = convert(Float64, -18552667221896744226647 // 865384003125000000000000)
const a1009_RK9 = convert(Float64, -3167799860072183913409 // 30423656359863281250000)

const a1101_RK9 = convert(Float64,
    -BigInt(426968570497) // BigInt(54394415898750) -
    BigInt(92754382349) // BigInt(12087647977500) * 6^(1 // 2))
const a1106_RK9 = convert(Float64, 1 // 30)
const a1107_RK9 = convert(Float64,
    -BigInt(2865012129681958) // BigInt(114898584332330625) -
    BigInt(12962517687655099) // BigInt(229797168664661250) * 6^(1 // 2))
const a1108_RK9 = convert(Float64,
    BigInt(4389715333607) // BigInt(309890657317500) +
    BigInt(92754382349) // BigInt(11477431752500) * 6^(1 // 2))
const a1109_RK9 = convert(Float64,
    BigInt(4990058173976) // BigInt(83757096376875) +
    BigInt(371017529396) // BigInt(9306344041875) * 6^(1 // 2))
const a1110_RK9 = convert(Float64,
    BigInt(1099523524595993125000) // BigInt(6257667909869756018891) +
    BigInt(100957348037989687500) // BigInt(6257667909869756018891) *
    6^(1 // 2))

const a1201_RK9 = convert(Float64,
    BigInt(18382031104798403869938539009154656587521498573595595063164077882800315372787284683238439478955141517997198007108623761931447163756) //
    BigInt(13974256944499724344918960993890933614161025322970450047932688998095008528620821239604734608111291769444706187497807869179550841329375) +
    BigInt(407885778185158609210793892517582595305896470756467612636796259611491408260896413446883450891351622914818800693274034252252905536) //
    BigInt(28084926388601226073624096169175002956970191576455110633226765141161372294098693275117181239385312198137508846535933127837167926875) *
    6^(1 // 2))
const a1206_RK9 = convert(Float64,
    -BigInt(333881311789849411971573472868128281438202210721723123251742145367734582887577395547778228760174068758086134389952015563403904) //
    BigInt(2270872004608103037127689848604039623086639035441372934050180593816493796129405349914148981460714202232988727738778494557727635) +
    BigInt(4819272892477768171373308666720689121421091953625792970278044071549950640195056472955523769829034800621890424847009130000000) //
    BigInt(23162894447002650978702436455761204155483718161502003927311842056928236720519934569124319610899284862776485022935540644488821877) *
    6^(1 // 2))
const a1207_RK9 = convert(Float64,
    -BigInt(136666607496463622270135608863772076443625468798139480390426740993024803946981763209348364716108721312822619845726151693667598437699964416) //
    BigInt(3719286465342404274788585327254180828195282427342057650194855634917821113563432870681372043512520401887141437067106105683944802332422369375) +
    BigInt(169845085565361336805556009296394374527636952379388961026066628725155521832762086875632366996477567928657535912191396155566765457826139904) //
    BigInt(1593979913718173260623679425966077497797978183146596135797795272107637620098614087434873732933937315094489187314474045293119200999609586875) *
    6^(1 // 2))
const a1208_RK9 = convert(Float64,
    BigInt(5610987899273278525411960528081442902198567594809764379756195673673265700551076812883925583370253765702553235594764427173637673766208) //
    BigInt(92881598198144033018278804740626334135423356791639598109358867770361609232846012626732332450844264293840456574956036349633197336361875) -
    BigInt(5587476413495323413846491678323049250765705078855720721052003556321800113162964567765526724539063327600257543743479921263738432) //
    BigInt(365303089362201664516413596925286161494473575337115296250511752859728108868696929614024803255122785403232359817965288739565550625) *
    6^(1 // 2))
const a1209_RK9 = convert(Float64,
    BigInt(54598539818083615233566148602203244896696958910734339754065270985433507945162707737759469214674480807272210648148477499238783276259328) //
    BigInt(301247919092298852634886875129959310794662932014184499827145075851637298698312074030567479239502011693447423026416040794479934024058125) -
    BigInt(6526172450962537747372702280281321524894343532103481802188740153783862532174342615150135214261625966637100811092384548036046488576) //
    BigInt(86490932843037281836028387921320502668579653176624892284566487468170341285762869374265713247057712228954184044334206372230816544375) *
    6^(1 // 2))
const a1210_RK9 = convert(Float64,
    BigInt(9391667348404584010955422210328707125006120661611061908889750805619418785820948002455890360939221912190524731087070645107486913457760000000) //
    BigInt(58157266968773020612419028503738708303515285854970725662326801531295387265784849843172223645193277229358434488742203091272981931739152584783) -
    BigInt(8108825145085088104344721048166325225173729495689364696426720161112012414227752328969720658987315654179873760357725235734000399440000000) //
    BigInt(265558296661064021061274102756797754810572081529546692522040189640618206693081506133206500662983001047298787619827411375675716583283801757) *
    6^(1 // 2))
const a1211_RK9 = convert(Float64,
    BigInt(123461712659887915177271339396606860810479028777869348014870450606260914019560285661288212498128400476015695960341952) //
    BigInt(281629106670320674754245209358840703704235147307838896741075511220826056829047205614324978253226176275078922716132461))

const a1301_RK9 = convert(Float64,
    -BigInt(56042772675322042139227629978042586330633622706053363946766144416933631) //
    BigInt(58808540772323190525590122613223430507352118534557342666015625000000000) +
    BigInt(281404579734699232141455524604487724159024972527) //
    BigInt(1478009944832743180452316204077188415527343750000) * 6^(1 // 2))
const a1306_RK9 = convert(Float64,
    -BigInt(1027163900229750356561238237947225332675621517) //
    BigInt(179261894431132664078747698292867431640625000) -
    BigInt(2745292391641202525373103979336813513372321) //
    BigInt(11702216468464340311060649744558385937500000) * 6^(1 // 2))
const a1307_RK9 = convert(Float64,
    -BigInt(157229999853748227305165773364426925282378072238332930121) //
    BigInt(36699907367985458573273204094330716033963413238525390625) +
    BigInt(5757606442802795095318986067317837904184278650664590252101) //
    BigInt(3523191107326604023034227593055748739260487670898437500000) *
    6^(1 // 2))
const a1308_RK9 = convert(Float64,
    -BigInt(9311448168593934146015965019904013602133802943325818346622781285907057) //
    BigInt(4255970849010124217193135449668739985401313363005576159362792968750000) -
    BigInt(844213739204097696424366573813463172477074917581) //
    BigInt(4210188359946578336976868164966163024902343750000) * 6^(1 // 2))
const a1309_RK9 = convert(Float64,
    BigInt(885774233856672590222951867695327816457340130391639153070521335485617578) //
    BigInt(301098541380295011015469248465465290112505656143757799934635162353515625) -
    BigInt(281404579734699232141455524604487724159024972527) //
    BigInt(284481916364737983221402322504830303192138671875) * 6^(1 // 2))
const a1310_RK9 = convert(Float64,
    BigInt(315479116729780153956412124052199685097744239386639023787359107959254802182) //
    BigInt(134481850506505848012587842215515574380212543200894932329128471154748828125) -
    BigInt(2940396453647872276646068776592292229737651937934623) //
    BigInt(7345465058781983710795837429530784777245286520703125) *
    6^(1 // 2))
const a1311_RK9 = convert(Float64,
    BigInt(2250996163406545378616532039018846586217631599453822541) //
    BigInt(382491303797095993563304148204275636433504028320312500))
const a1312_RK9 = convert(Float64,
    BigInt(2689340957307691853294902388334454003959378146957529866233529251986359392336044151708949720958809747970514366293458424272174024493) //
    BigInt(959516386019578808500569114780871708466894752280482835105408027815194895319055443842782227102120493960805649575561796875000000000))

const a1401_RK9 = convert(Float64,
    BigInt(47342003848024391498707976847688893013083074441159779465719863625051668939887702630319) //
    BigInt(44802546873926050730401222636656855760802419993852060264615320801485392456054687500000) -
    BigInt(866369530987077991125562402829092187100493209601) //
    BigInt(3325522375873672156017711459173673934936523437500) * 6^(1 // 2))
const a1406_RK9 = convert(Float64,
    BigInt(871779321807802447463310035318238762878527157) //
    BigInt(134446420823349498059060773719650573730468750) +
    BigInt(107641268480999396081848975271849857994818) //
    BigInt(1097082793918531904161935913552348681640625) * 6^(1 // 2))
const a1407_RK9 = convert(Float64,
    BigInt(496103786351862292800034805114190705484800743513354117014) //
    BigInt(110099722103956375719819612282992148101890239715576171875) -
    BigInt(1329938412606197485769312599390307351191540891599374831099) //
    BigInt(660598332623738254318917673697952888611341438293457031250) *
    6^(1 // 2))
const a1408_RK9 = convert(Float64,
    BigInt(40774077277747636354598451708891165494123131383777235229538611989392175193285994266471) //
    BigInt(15264290546248162101058985941588079518256741255377031736357946125713524703979492187500) +
    BigInt(123767075855296855875080343261298883871499029943) //
    BigInt(451091609994276250390378731960660324096679687500) * 6^(1 // 2))
const a1409_RK9 = convert(Float64,
    -BigInt(10522038608500556459828649038302068473735749030796372764961618751973793724796364606986664) //
    BigInt(3899417425005422254034574000397382862235892829653375835197340918271556055507659912109375) +
    BigInt(3465478123948311964502249611316368748401972838404) //
    BigInt(2560337247282641848992620902543472728729248046875) * 6^(1 // 2))
const a1410_RK9 = convert(Float64,
    -BigInt(27843764471262693189365201135620670490328475323282820219474851621693895769527094334687108984) //
    BigInt(12257041066285164222002594300605593929434139193022166317802121412999357024704596261133984375) +
    BigInt(574774300271998598683873114105472016699241495055292) //
    BigInt(1049352151254569101542262489932969253892183788671875) *
    6^(1 // 2))
const a1411_RK9 = convert(Float64,
    -BigInt(34241134351848245624232809437676889009431930503529853032576417589898516) //
    BigInt(5613347824358651981100985009024281007603230062439942682713165283203125))
const a1412_RK9 = convert(Float64,
    -BigInt(3432044375893932378102368568052286501033850910516999202088532705211633432793920547702800961532438008401883737341854688972639605334600163938610268855705742764072609) //
    BigInt(1143174106341682260971647690410567292143926198650927778920823267461111371275907599801714870165813394147519068210931766844494994616580258435518181434575195312500000))
const a1413_RK9 = convert(Float64,
    BigInt(4746930876023919335079451612726717649218264199984) //
    BigInt(18592065538407049755200144388134089346432755594877))

const a1501_RK9 = convert(Float64,
    -BigInt(25188329249258825443748527038142409879923012133738985313265430932280250855708601) //
    BigInt(11370641325574469312056961874077298550827642308774647316995717036347558064286250) +
    BigInt(1234273058981860170179592598535508631343082535549881956) //
    BigInt(2105633771469628744518390642968552144069898845895808125) *
    6^(1 // 2))
const a1506_RK9 = convert(Float64,
    -BigInt(54821142119685055562477216205428613949905430396088) //
    BigInt(3959439837009461289085587746748097947393101278095) -
    BigInt(1511276753825982856072891469504471256664975925000) //
    BigInt(40386286337496505148672995016830599063409633036569) * 6^(1 // 2))
const a1507_RK9 = convert(Float64,
    -BigInt(60922424274061599918603524049390657305431262635197540405697952) //
    BigInt(6484861747489032169774584624759953148531564032417461909516875) +
    BigInt(84558575751635978733109961893984238786929550462615375699341616) //
    BigInt(19454585242467096509323753874279859445594692097252385728550625) *
    6^(1 // 2))
const a1508_RK9 = convert(Float64,
    -BigInt(116118147575045169733222875835719955334334798191459879782123534889390467935109772) //
    BigInt(8810626901954835245672275131295870892503713957512170681453300814988417642493125) -
    BigInt(176324722711694310025656085505072661620440362221411708) //
    BigInt(285619406719829107485771207042040133465420149964555625) *
    6^(1 // 2))
const a1509_RK9 = convert(Float64,
    BigInt(17769448722513898342276837490665097286927607247073335618566987143467294900183033216) //
    BigInt(2551217008137889615056342146084561867122485163596619283719957742418751029506356875) -
    BigInt(19748368943709762722873481576568138101489320568798111296) //
    BigInt(6484554262322259071286545935997129135111813687175650625) *
    6^(1 // 2))
const a1510_RK9 = convert(Float64,
    BigInt(97659266139124074818193264801929547781659926543786381510190954184218570746215033823993530000000) //
    BigInt(18560076654469706205963482908787056850812308205603127326855360961727608242796551101182080033599) -
    BigInt(85297084611782122474911131363078900058888025224607913745000000) //
    BigInt(69210659450201393843166746722954036326338355649915383851733911) *
    6^(1 // 2))
const a1511_RK9 = convert(Float64,
    BigInt(473389749049752963256114649231353822492912259509649519870869750525) //
    BigInt(35412440882360341799798842428365422941216508121322622479260846291))
const a1512_RK9 = convert(Float64,
    BigInt(33351439245158438248073494056784144097872912773415904536400728387690334563968394114702414108807505158106385116468732853458202899966748488718531545706559142895903144848764637) //
    BigInt(2316611025327287427714802011322252886090793904989900621592365627649097578102163572190502232425490606773312310665593424982745744299371285598588298606088543376742054644818966))
const a1513_RK9 = convert(Float64,
    -BigInt(38714992656958413389743252726016897599283911682945255636643554687500000) //
    BigInt(48540494926971587499294589382572212036169135429877901702347521300421767))
const a1514_RK9 = convert(Float64,
    BigInt(14800250200940323717124616175641261235119295795768814717803955078125) //
    BigInt(33565577125141877760287380588632421223433194078156948298488471160489))

const b1_RK9 = convert(Float64,
    8198160366203173411119943711500331 // 561057579384085860167277847128765528)
const b8_RK9 = convert(Float64,
    -BigInt(455655493073428838813281446213740000000) //
    BigInt(1163808011150910561240464225837312497869))
const b9_RK9 = convert(Float64,
    BigInt(19965163648706008081135075746915614720000000) //
    BigInt(86394404190537086868394686205782432516544599))
const b10_RK9 = convert(Float64,
    BigInt(89231107919981418705566970804343750000000000000000000000) //
    BigInt(699979870988335674445594679856445060562597693583175985391))
const b11_RK9 = convert(Float64,
    47104273954945906713184913871143492 //
    209684639122339601934631113492763467)
const b12_RK9 = convert(Float64,
    BigInt(20845004421404500464010584740796750650832176798370383084226351294730731196673647311062330972740734737279503119387627146381678677156136042524139311907482802844083) //
    BigInt(36670849891136373020238225328265100250605144718501926305140966586758054847604681466336103169284755987753542321202462371554120593858149755539878561976786592389608))
const b13_RK9 = convert(Float64,
    BigInt(6053037282142306509795911286909179687500000000) //
    BigInt(103899257350518063455290077573775162739725126989))
const b14_RK9 = convert(Float64,
    BigInt(917401104920993498360358406096725463867187500) //
    BigInt(6724249815911346653315790737453607382989551463))
const b15_RK9 = convert(Float64,
    2585449557665268951371699596493957 // 84574345160764140163208606048427531)
##################################################
# Integrates for one timestep using RK9
##################################################
function integrate_DT_RK9!()
    ####################
    copy_tab!(TAB_X,TAB_Y,TAB_X_1,TAB_Y_1) # Initial position
    ####################
    # Step 1
    ####################
    TAB_DOT!()
    copy_tab!(TAB_XDOT,TAB_YDOT,TAB_XDOT_1,TAB_YDOT_1)
    ####################
    # Step 2
    ####################
    combine_tab!((a0201_RK9,),
                   (TAB_XDOT_1,),
                   (TAB_YDOT_1,),
                   TAB_XDOT,
                   TAB_YDOT)
    drift!(TAB_X_1,TAB_Y_1,
           TAB_X,TAB_Y,
           TAB_XDOT,TAB_YDOT,
           DT)
    TAB_DOT!()
    copy_tab!(TAB_XDOT,TAB_YDOT,TAB_XDOT_2,TAB_YDOT_2)
    ####################
    # Step 3
    ####################
    combine_tab!((a0301_RK9,a0302_RK9),
                   (TAB_XDOT_1,TAB_XDOT_2),
                   (TAB_YDOT_1,TAB_YDOT_2),
                   TAB_XDOT,
                   TAB_YDOT)
    drift!(TAB_X_1,TAB_Y_1,
           TAB_X,TAB_Y,
           TAB_XDOT,TAB_YDOT,
           DT)
    TAB_DOT!()
    copy_tab!(TAB_XDOT,TAB_YDOT,TAB_XDOT_3,TAB_YDOT_3)
    ####################
    # Step 4
    ####################
    combine_tab!((a0401_RK9,a0403_RK9),
                   (TAB_XDOT_1,TAB_XDOT_3),
                   (TAB_YDOT_1,TAB_YDOT_3),
                   TAB_XDOT,
                   TAB_YDOT)
    drift!(TAB_X_1,TAB_Y_1,
           TAB_X,TAB_Y,
           TAB_XDOT,TAB_YDOT,
           DT)
    TAB_DOT!()
    copy_tab!(TAB_XDOT,TAB_YDOT,TAB_XDOT_4,TAB_YDOT_4)
    ####################
    # Step 5
    ####################
    combine_tab!((a0501_RK9,a0503_RK9,a0504_RK9),
                   (TAB_XDOT_1,TAB_XDOT_3,TAB_XDOT_4),
                   (TAB_YDOT_1,TAB_YDOT_3,TAB_YDOT_4),
                   TAB_XDOT,
                   TAB_YDOT)
    drift!(TAB_X_1,TAB_Y_1,
           TAB_X,TAB_Y,
           TAB_XDOT,TAB_YDOT,
           DT)
    TAB_DOT!()
    copy_tab!(TAB_XDOT,TAB_YDOT,TAB_XDOT_5,TAB_YDOT_5)
    ####################
    # Step 6
    ####################
    combine_tab!((a0601_RK9,a0604_RK9,a0605_RK9),
                   (TAB_XDOT_1,TAB_XDOT_4,TAB_XDOT_5),
                   (TAB_YDOT_1,TAB_YDOT_4,TAB_YDOT_5),
                   TAB_XDOT,
                   TAB_YDOT)
    drift!(TAB_X_1,TAB_Y_1,
           TAB_X,TAB_Y,
           TAB_XDOT,TAB_YDOT,
           DT)
    TAB_DOT!()
    copy_tab!(TAB_XDOT,TAB_YDOT,TAB_XDOT_6,TAB_YDOT_6)
    ####################
    # Step 7
    ####################
    combine_tab!((a0701_RK9,a0704_RK9,a0705_RK9,a0706_RK9),
                   (TAB_XDOT_1,TAB_XDOT_4,TAB_XDOT_5,TAB_XDOT_6),
                   (TAB_YDOT_1,TAB_YDOT_4,TAB_YDOT_5,TAB_YDOT_6),
                   TAB_XDOT,
                   TAB_YDOT)
    drift!(TAB_X_1,TAB_Y_1,
           TAB_X,TAB_Y,
           TAB_XDOT,TAB_YDOT,
           DT)
    TAB_DOT!()
    copy_tab!(TAB_XDOT,TAB_YDOT,TAB_XDOT_7,TAB_YDOT_7)
    ####################
    # Step 8
    ####################
    combine_tab!((a0801_RK9,a0806_RK9,a0807_RK9),
                   (TAB_XDOT_1,TAB_XDOT_6,TAB_XDOT_7),
                   (TAB_YDOT_1,TAB_YDOT_6,TAB_YDOT_7),
                   TAB_XDOT,
                   TAB_YDOT)
    drift!(TAB_X_1,TAB_Y_1,
           TAB_X,TAB_Y,
           TAB_XDOT,TAB_YDOT,
           DT)
    TAB_DOT!()
    copy_tab!(TAB_XDOT,TAB_YDOT,TAB_XDOT_8,TAB_YDOT_8)
    ####################
    # Step 9
    ####################
    combine_tab!((a0901_RK9,a0906_RK9,a0907_RK9,a0908_RK9),
                   (TAB_XDOT_1,TAB_XDOT_6,TAB_XDOT_7,TAB_XDOT_8),
                   (TAB_YDOT_1,TAB_YDOT_6,TAB_YDOT_7,TAB_YDOT_8),
                   TAB_XDOT,
                   TAB_YDOT)
    drift!(TAB_X_1,TAB_Y_1,
           TAB_X,TAB_Y,
           TAB_XDOT,TAB_YDOT,
           DT)
    TAB_DOT!()
    copy_tab!(TAB_XDOT,TAB_YDOT,TAB_XDOT_9,TAB_YDOT_9)
    ####################
    # Step 10
    ####################
    combine_tab!((a1001_RK9,a1006_RK9,a1007_RK9,a1008_RK9,a1009_RK9),
                   (TAB_XDOT_1,TAB_XDOT_6,TAB_XDOT_7,TAB_XDOT_8,TAB_XDOT_9),
                   (TAB_YDOT_1,TAB_YDOT_6,TAB_YDOT_7,TAB_YDOT_8,TAB_YDOT_9),
                   TAB_XDOT,
                   TAB_YDOT)
    drift!(TAB_X_1,TAB_Y_1,
           TAB_X,TAB_Y,
           TAB_XDOT,TAB_YDOT,
           DT)
    TAB_DOT!()
    copy_tab!(TAB_XDOT,TAB_YDOT,TAB_XDOT_10,TAB_YDOT_10)
    ####################
    # Step 11
    ####################
    combine_tab!((a1101_RK9,a1106_RK9,a1107_RK9,a1108_RK9,a1109_RK9,a1110_RK9),
                   (TAB_XDOT_1,TAB_XDOT_6,TAB_XDOT_7,TAB_XDOT_8,TAB_XDOT_9,TAB_XDOT_10),
                   (TAB_YDOT_1,TAB_YDOT_6,TAB_YDOT_7,TAB_YDOT_8,TAB_YDOT_9,TAB_YDOT_10),
                   TAB_XDOT,
                   TAB_YDOT)
    drift!(TAB_X_1,TAB_Y_1,
           TAB_X,TAB_Y,
           TAB_XDOT,TAB_YDOT,
           DT)
    TAB_DOT!()
    copy_tab!(TAB_XDOT,TAB_YDOT,TAB_XDOT_11,TAB_YDOT_11)
    ####################
    # Step 12
    ####################
    combine_tab!((a1201_RK9,a1206_RK9,a1207_RK9,a1208_RK9,a1209_RK9,a1210_RK9,
                  a1211_RK9),
                   (TAB_XDOT_1,TAB_XDOT_6,TAB_XDOT_7,TAB_XDOT_8,TAB_XDOT_9,TAB_XDOT_10,
                    TAB_XDOT_11),
                   (TAB_YDOT_1,TAB_YDOT_6,TAB_YDOT_7,TAB_YDOT_8,TAB_YDOT_9,TAB_YDOT_10,
                    TAB_YDOT_11),
                    TAB_XDOT,
                    TAB_YDOT)
    drift!(TAB_X_1,TAB_Y_1,
           TAB_X,TAB_Y,
           TAB_XDOT,TAB_YDOT,
           DT)
    TAB_DOT!()
    copy_tab!(TAB_XDOT,TAB_YDOT,TAB_XDOT_12,TAB_YDOT_12)
    ####################
    # Step 13
    ####################
    combine_tab!((a1301_RK9,a1306_RK9,a1307_RK9,a1308_RK9,a1309_RK9,
                  a1310_RK9,a1311_RK9,a1312_RK9),
                   (TAB_XDOT_1,TAB_XDOT_6,TAB_XDOT_7,TAB_XDOT_8,TAB_XDOT_9,
                    TAB_XDOT_10,TAB_XDOT_11,TAB_XDOT_12),
                   (TAB_YDOT_1,TAB_YDOT_6,TAB_YDOT_7,TAB_YDOT_8,TAB_YDOT_9,
                    TAB_YDOT_10,TAB_YDOT_11,TAB_YDOT_12),
                   TAB_XDOT,
                   TAB_YDOT)
    drift!(TAB_X_1,TAB_Y_1,
           TAB_X,TAB_Y,
           TAB_XDOT,TAB_YDOT,
           DT)
    TAB_DOT!()
    copy_tab!(TAB_XDOT,TAB_YDOT,TAB_XDOT_13,TAB_YDOT_13)
    ####################
    # Step 14
    ####################
    combine_tab!((a1401_RK9,a1406_RK9,a1407_RK9,a1408_RK9,a1409_RK9,
                  a1410_RK9,a1411_RK9,a1412_RK9,a1413_RK9),
                   (TAB_XDOT_1,TAB_XDOT_6,TAB_XDOT_7,TAB_XDOT_8,TAB_XDOT_9,
                    TAB_XDOT_10,TAB_XDOT_11,TAB_XDOT_12,TAB_XDOT_13),
                   (TAB_YDOT_1,TAB_YDOT_6,TAB_YDOT_7,TAB_YDOT_8,TAB_YDOT_9,
                    TAB_YDOT_10,TAB_YDOT_11,TAB_YDOT_12,TAB_YDOT_13),
                    TAB_XDOT,
                    TAB_YDOT)
    drift!(TAB_X_1,TAB_Y_1,
           TAB_X,TAB_Y,
           TAB_XDOT,TAB_YDOT,
           DT)
    TAB_DOT!()
    copy_tab!(TAB_XDOT,TAB_YDOT,TAB_XDOT_14,TAB_YDOT_14)
    ####################
    # Step 15
    ####################
    combine_tab!((a1501_RK9,a1506_RK9,a1507_RK9,a1508_RK9,a1509_RK9,
                  a1510_RK9,a1511_RK9,a1512_RK9,a1513_RK9,a1514_RK9),
                   (TAB_XDOT_1,TAB_XDOT_6,TAB_XDOT_7,TAB_XDOT_8,TAB_XDOT_9,
                    TAB_XDOT_10,TAB_XDOT_11,TAB_XDOT_12,TAB_XDOT_13,TAB_XDOT_14),
                   (TAB_YDOT_1,TAB_YDOT_6,TAB_YDOT_7,TAB_YDOT_8,TAB_YDOT_9,
                    TAB_YDOT_10,TAB_YDOT_11,TAB_YDOT_12,TAB_YDOT_13,TAB_YDOT_14),
                    TAB_XDOT,
                    TAB_YDOT)
    drift!(TAB_X_1,TAB_Y_1,
           TAB_X,TAB_Y,
           TAB_XDOT,TAB_YDOT,
           DT)
    TAB_DOT!()
    copy_tab!(TAB_XDOT,TAB_YDOT,TAB_XDOT_15,TAB_YDOT_15)
    ####################
    # Final stage
    ####################
    combine_tab!((b1_RK9,b8_RK9,b9_RK9,b10_RK9,b11_RK9,
                  b12_RK9,b13_RK9,b14_RK9,b15_RK9),
                    (TAB_XDOT_1,TAB_XDOT_8,TAB_XDOT_9,TAB_XDOT_10,TAB_XDOT_11,
                     TAB_XDOT_12,TAB_XDOT_13,TAB_XDOT_14,TAB_XDOT_15),
                    (TAB_YDOT_1,TAB_YDOT_8,TAB_YDOT_9,TAB_YDOT_10,TAB_YDOT_11,
                     TAB_YDOT_12,TAB_YDOT_13,TAB_YDOT_14,TAB_YDOT_15),
                     TAB_XDOT,
                     TAB_YDOT)
    drift!(TAB_X_1,TAB_Y_1,
           TAB_X,TAB_Y,
           TAB_XDOT,TAB_YDOT,
           DT)
    #####
    TIME[1] += 1 # Updating the time
    #####
end